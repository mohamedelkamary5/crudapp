{"version":3,"sources":["Components/Courselist/Courselist.js","Components/Coursefrom/Coursefrom.js","App.js","serviceWorker.js","index.js"],"names":["Courselist","state","isEdit","rederCourse","props","details","deleteItem","index","className","onClick","toggle","rederEdit","onSubmit","updeteCourseItem","type","ref","v","input","defaultValue","e","preventDefault","editCourse","value","setState","this","Component","Coursefrom","addCourse","id","onChange","updetaCourse","current","App","courses","name","target","push","splice","courselist","length","map","course","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mSA4DeA,G,wNAzDbC,MAAQ,CACNC,QAAQ,G,EAGVC,YAAc,WAAO,IAAD,EACqB,EAAKC,MAApCC,EADU,EACVA,QAASC,EADC,EACDA,WAAYC,EADX,EACWA,MAC7B,OACE,wBAAIC,UAAU,cACZ,8BAAOH,GACP,4BAAQG,UAAU,OAAOC,QAAS,EAAKC,QAAvC,eAGA,4BACEF,UAAU,SACVC,QAAS,WACPH,EAAWC,KAHf,Y,EAYNI,UAAY,WACV,OACE,0BAAMH,UAAU,aAAaI,SAAU,EAAKC,kBAC1C,2BACEC,KAAK,OACLC,IAAK,SAACC,GACJ,EAAKC,MAAQD,GAEfE,aAAc,EAAKd,MAAMC,UAE3B,4BAAQG,UAAU,cAAlB,mB,EAKNK,iBAAmB,SAACM,GAClBA,EAAEC,iBADsB,MAEI,EAAKhB,OACjCiB,EAHwB,EAElBA,YAFkB,EAENd,MACA,EAAKU,MAAMK,OAC7B,EAAKZ,U,EAGPA,OAAS,WAAO,IACRR,EAAW,EAAKD,MAAhBC,OACN,EAAKqB,SAAS,CACZrB,QAASA,K,uDAGH,IACFA,EAAWsB,KAAKvB,MAAhBC,OACN,OAAO,oCAAGA,EAASsB,KAAKrB,cAAgBqB,KAAKb,iB,GAvDxBc,cCcVC,G,MAdI,SAACtB,GAClB,OACE,0BAAMI,UAAU,MAAMI,SAAUR,EAAMuB,WACpC,2BACEb,KAAK,OACLc,GAAG,OACHC,SAAUzB,EAAM0B,aAChBR,MAAOlB,EAAM2B,UAEf,iDCuESC,E,4MA5Eb/B,MAAQ,CACNgC,QAAS,CACP,CAAEC,KAAM,QACR,CAAEA,KAAM,OACR,CAAEA,KAAM,MACR,CAAEA,KAAM,UAEVH,QAAS,I,EAGXD,aAAe,SAACX,GACd,EAAKI,SAAS,CACZQ,QAASZ,EAAEgB,OAAOb,S,EAItBK,UAAY,SAACR,GACXA,EAAEC,iBADe,MAEY,EAAKnB,MAA1BgC,EAFS,EAETA,QAASF,EAFA,EAEAA,QACjB,GAAgB,KAAZA,EACF,OAAO,EAEPE,EAAQG,KAAK,CAAEF,KAAMH,IACrB,EAAKR,SAAS,CACZU,UACAF,QAAS,M,EAKfzB,WAAa,SAACC,GAAW,IACf0B,EAAY,EAAKhC,MAAjBgC,QACRA,EAAQI,OAAO9B,EAAO,GACtB,EAAKgB,SAAS,CAAEU,a,EAGlBZ,WAAa,SAACd,EAAOe,GAAW,IACxBW,EAAY,EAAKhC,MAAjBgC,QACOA,EAAQ1B,GACf,KAAWe,EACjB,EAAKC,SAAS,CAAEU,a,uDAGR,IAAD,OACCA,EAAYT,KAAKvB,MAAjBgC,QAEFK,EADOL,EAAQM,OAEnBN,EAAQO,KAAI,SAACC,EAAQlC,GACnB,OACE,kBAAC,EAAD,CACEF,QAASoC,EAAOP,KAChBQ,IAAKnC,EACLA,MAAOA,EACPD,WAAY,EAAKA,WACjBe,WAAY,EAAKA,gBAKvB,mDAGF,OACE,6BAASb,UAAU,aACjB,0CACA,kBAAC,EAAD,CACEsB,aAAcN,KAAKM,aACnBH,UAAWH,KAAKG,UAChBI,QAASP,KAAKvB,MAAM8B,UAEtB,4BAAKO,Q,GAvEKb,aCOEkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.09005727.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./Courselist.scss\";\r\nclass Courselist extends Component {\r\n  state = {\r\n    isEdit: true,\r\n  };\r\n  // rederCourse Function\r\n  rederCourse = () => {\r\n    const { details, deleteItem, index } = this.props;\r\n    return (\r\n      <li className=\"toggleform\">\r\n        <span>{details}</span>\r\n        <button className=\"edit\" onClick={this.toggle}>\r\n          Edit Course\r\n        </button>\r\n        <button\r\n          className=\"delete\"\r\n          onClick={() => {\r\n            deleteItem(index);\r\n          }}\r\n        >\r\n          Delete\r\n        </button>\r\n      </li>\r\n    );\r\n  };\r\n  // edit Course\r\n  rederEdit = () => {\r\n    return (\r\n      <form className=\"toggleform\" onSubmit={this.updeteCourseItem}>\r\n        <input\r\n          type=\"text\"\r\n          ref={(v) => {\r\n            this.input = v;\r\n          }}\r\n          defaultValue={this.props.details}\r\n        />\r\n        <button className=\"btn-updete\">Updete Course</button>\r\n      </form>\r\n    );\r\n  };\r\n  // updeteCourseItem\r\n  updeteCourseItem = (e) => {\r\n    e.preventDefault();\r\n    let { editCourse, index } = this.props;\r\n    editCourse(index, this.input.value);\r\n    this.toggle();\r\n  };\r\n  // toggle\r\n  toggle = () => {\r\n    let { isEdit } = this.state;\r\n    this.setState({\r\n      isEdit: !isEdit,\r\n    });\r\n  };\r\n  render() {\r\n    let { isEdit } = this.state;\r\n    return <>{isEdit ? this.rederCourse() : this.rederEdit()}</>;\r\n  }\r\n}\r\nexport default Courselist;\r\n","import React from \"react\";\r\nimport \"./Coursefrom.scss\";\r\nconst Coursefrom = (props) => {\r\n  return (\r\n    <form className=\"add\" onSubmit={props.addCourse}>\r\n      <input\r\n        type=\"text\"\r\n        id=\"name\"\r\n        onChange={props.updetaCourse}\r\n        value={props.current}\r\n      />\r\n      <button>Add Course</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Coursefrom;\r\n","import React, { Component } from \"react\";\nimport \"./App.scss\";\nimport Courselist from \"./Components/Courselist/Courselist\";\nimport Courseform from \"./Components/Coursefrom/Coursefrom\";\n\nclass App extends Component {\n  state = {\n    courses: [\n      { name: \"html\" },\n      { name: \"css\" },\n      { name: \"js\" },\n      { name: \"react\" },\n    ],\n    current: \"\",\n  };\n\n  updetaCourse = (e) => {\n    this.setState({\n      current: e.target.value,\n    });\n  };\n\n  addCourse = (e) => {\n    e.preventDefault();\n    const { courses, current } = this.state;\n    if (current === \"\") {\n      return false;\n    } else {\n      courses.push({ name: current });\n      this.setState({\n        courses,\n        current: \"\",\n      });\n    }\n  };\n\n  deleteItem = (index) => {\n    const { courses } = this.state;\n    courses.splice(index, 1);\n    this.setState({ courses });\n  };\n\n  editCourse = (index, value) => {\n    let { courses } = this.state;\n    let course = courses[index];\n    course[\"name\"] = value;\n    this.setState({ courses });\n  };\n\n  render() {\n    const { courses } = this.state;\n    let length = courses.length;\n    const courselist = length ? (\n      courses.map((course, index) => {\n        return (\n          <Courselist\n            details={course.name}\n            key={index}\n            index={index}\n            deleteItem={this.deleteItem}\n            editCourse={this.editCourse}\n          />\n        );\n      })\n    ) : (\n      <p>There are no courses</p>\n    );\n\n    return (\n      <section className=\"container\">\n        <h1>Add Course</h1>\n        <Courseform\n          updetaCourse={this.updetaCourse}\n          addCourse={this.addCourse}\n          current={this.state.current}\n        />\n        <ul>{courselist}</ul>\n      </section>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}